<launch>
	<!-- 环境变量，PX4仿真启动脚本rcS中需要用到 -->
	<env name="PX4_SIM_MODEL" value="p450" />
    <env name="PX4_ESTIMATOR" value="ekf2" />

	<!-- 启动Gazebo，可选择仿真所用的world -->
    <arg name="gui" default="true"/>
	<arg name="world" default="$(find prometheus_gazebo)/worlds/formation_stage.world"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
    </include>

	<!-- 使用group标签来对不同的无人机进行分组，因此，不同无人机的话题会带上前缀，如/uav0、/uav1等 -->
	<!-- 理解仿真的四个模块, 其中1和2为必备模块，3和4可缺省 -->
	<!-- 1、PX4_SITL PX4软件在环仿真模块，即代表飞控，这块代码在Firmware中，注意部分代码与实际飞行相同，部分则是独立的代码 -->
	<!-- 2、simulator 仿真器模块，此处即Gazebo，代码为model文件中的plugin -->
	<!-- 3、Offboard模块 即Mavros -->
	<!-- 4、QGC模块 即地面站--> 

	<!-- 无人机编号（PX4内部参数） 	MAV_SYS_ID = ID + 1 -->
	<!-- 仿真器端口号（用于飞控与Gazebo进行通讯）	 simulator_tcp_port = 4560 + ID （需要再SDF文件中配置对应的参数 mavlink_tcp_port）-->
	<!-- Offboard端口号（用于飞控与Mavros进行通讯） udp_offboard_port_local = 14580 + ID -->
	<!-- Offboard端口号（用于飞控与Mavros进行通讯） udp_offboard_port_remote = 14540 + ID -->
	<!-- 地面站端口号（用于飞控与QGC进行通讯） udp_gcs_port_local = 14570 + ID -->


    <!-- 1号飞机 -->
    <group ns="uav1">
        <!-- 参数配置-->
		<!-- ID编号 -->
        <arg name="ID" value="0"/>
		<!-- 指定sdf文件及模型名字 -->
		<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/MultiUAV/uav1/uav1.sdf"/>
		<arg name="model" default="uav1"/>
		<!-- 初始位置，Yaw为偏航角 -->
		<arg name="x" default="0"/>
		<arg name="y" default="0"/>
		<arg name="z" default="0.164"/>
		<arg name="Yaw" default="0"/>
		<!-- Mavros参数 -->
		<arg name="udp_offboard_port_remote" value="$(eval 14540 + arg('ID'))"/>
		<arg name="udp_offboard_port_local" value="$(eval 14580 + arg('ID'))"/>

		<!-- 启动PX4 SITL，此处参数配置不可删除 -->
		<arg name="interactive" default="true"/>
		<arg unless="$(arg interactive)" name="px4_command_arg1" value=""/>
		<arg     if="$(arg interactive)" name="px4_command_arg1" value="-d"/>
		<node name="sitl_$(arg ID)" pkg="px4" type="px4" output="screen" 
			args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS -i $(arg ID) -w sitl_p450_$(arg ID) $(arg px4_command_arg1)">
		</node>

		<!-- 启动Gazebo模型 -->
		<node name="p450_$(arg ID)_spawn" output="screen" pkg="gazebo_ros" type="spawn_model" 
			args="-sdf -file $(arg sdf) -model $(arg model) -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg Yaw)">
		</node>

		<!-- 启动MAVROS -->
		<node pkg="mavros" type="mavros_node" name="mavros" output="screen">
			<param name="fcu_url" value="udp://:$(arg udp_offboard_port_remote)@localhost:$(arg udp_offboard_port_local)"/>
			<param name="gcs_url" value="" />
			<param name="target_system_id" value="$(eval 1 + arg('ID'))"/>
			<param name="target_component_id" value="1" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_pluginlists.yaml" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_config.yaml" />
		</node>
    </group>


    <!-- 2号飞机 -->
    <group ns="uav2">
        <!-- 参数配置-->
		<!-- ID编号 -->
        <arg name="ID" value="1"/>
		<!-- 指定sdf文件及模型名字 -->
		<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/MultiUAV/uav2/uav2.sdf"/>
		<arg name="model" default="uav2"/>
		<!-- 初始位置，Yaw为偏航角 -->
		<arg name="x" default="0"/>
		<arg name="y" default="1"/>
		<arg name="z" default="0.164"/>
		<arg name="Yaw" default="0"/>
		<!-- Mavros参数 -->
		<arg name="udp_offboard_port_remote" value="$(eval 14540 + arg('ID'))"/>
		<arg name="udp_offboard_port_local" value="$(eval 14580 + arg('ID'))"/>

		<!-- 启动PX4 SITL，此处参数配置不可删除 -->
		<arg name="interactive" default="true"/>
		<arg unless="$(arg interactive)" name="px4_command_arg1" value=""/>
		<arg     if="$(arg interactive)" name="px4_command_arg1" value="-d"/>
		<node name="sitl_$(arg ID)" pkg="px4" type="px4" output="screen" 
			args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS -i $(arg ID) -w sitl_p450_$(arg ID) $(arg px4_command_arg1)">
		</node>

		<!-- 启动Gazebo模型 -->
		<node name="p450_$(arg ID)_spawn" output="screen" pkg="gazebo_ros" type="spawn_model" 
			args="-sdf -file $(arg sdf) -model $(arg model) -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg Yaw)">
		</node>

		<!-- 启动MAVROS -->
		<node pkg="mavros" type="mavros_node" name="mavros" output="screen">
			<param name="fcu_url" value="udp://:$(arg udp_offboard_port_remote)@localhost:$(arg udp_offboard_port_local)"/>
			<param name="gcs_url" value="" />
			<param name="target_system_id" value="$(eval 1 + arg('ID'))"/>
			<param name="target_component_id" value="1" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_pluginlists.yaml" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_config.yaml" />
		</node>
    </group>

    <!-- 3号飞机 -->
    <group ns="uav3">
        <!-- 参数配置-->
		<!-- ID编号 -->
        <arg name="ID" value="2"/>
		<!-- 指定sdf文件及模型名字 -->
		<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/MultiUAV/uav3/uav3.sdf"/>
		<arg name="model" default="uav3"/>
		<!-- 初始位置，Yaw为偏航角 -->
		<arg name="x" default="0"/>
		<arg name="y" default="-1"/>
		<arg name="z" default="0.164"/>
		<arg name="Yaw" default="0"/>
		<!-- Mavros参数 -->
		<arg name="udp_offboard_port_remote" value="$(eval 14540 + arg('ID'))"/>
		<arg name="udp_offboard_port_local" value="$(eval 14580 + arg('ID'))"/>

		<!-- 启动PX4 SITL，此处参数配置不可删除 -->
		<arg name="interactive" default="true"/>
		<arg unless="$(arg interactive)" name="px4_command_arg1" value=""/>
		<arg     if="$(arg interactive)" name="px4_command_arg1" value="-d"/>
		<node name="sitl_$(arg ID)" pkg="px4" type="px4" output="screen" 
			args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS -i $(arg ID) -w sitl_p450_$(arg ID) $(arg px4_command_arg1)">
		</node>

		<!-- 启动Gazebo模型 -->
		<node name="p450_$(arg ID)_spawn" output="screen" pkg="gazebo_ros" type="spawn_model" 
			args="-sdf -file $(arg sdf) -model $(arg model) -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg Yaw)">
		</node>

		<!-- 启动MAVROS -->
		<node pkg="mavros" type="mavros_node" name="mavros" output="screen">
			<param name="fcu_url" value="udp://:$(arg udp_offboard_port_remote)@localhost:$(arg udp_offboard_port_local)"/>
			<param name="gcs_url" value="" />
			<param name="target_system_id" value="$(eval 1 + arg('ID'))"/>
			<param name="target_component_id" value="1" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_pluginlists.yaml" />
			<rosparam command="load" file="$(find prometheus_gazebo)/config/mavros_config/px4_config.yaml" />
		</node>
    </group>

	<arg name="flag_printf" default="false"/>
	<arg name="swarm_num" default="3"/>
	<arg name="k_p" default="1.0"/>
	<arg name="k_aij" default="0.05"/>
	<arg name="k_gamma" default="1.2"/>
	<arg name="Takeoff_height" default="0.87"/>
	<arg name="Disarm_height" default="0.1"/>
	<arg name="Land_speed" default="0.2"/>
	<arg name="x_min" default="-100.0"/>
	<arg name="x_max" default="100.0"/>
	<arg name="y_min" default="-100.0"/>
	<arg name="y_max" default="100"/>
	<arg name="z_min" default="-1.0"/>
	<arg name="z_max" default="100.0"/>
	<node pkg="prometheus_control" type="swarm_controller" name="swarm_controller_uav1" output="screen">
		<param name="flag_printf" value="$(arg flag_printf)"/>
		<param name="swarm_num" value="$(arg swarm_num)"/>
		<param name="uav_id" value="1"/>
		<param name="neighbour_id1" value="2" />
		<param name="neighbour_id2" value="3"/>
		<param name="uav_name" value="/uav1"/>
		<param name="neighbour_name1" value="/uav2" />
		<param name="neighbour_name2" value="/uav3"/>
		<param name="k_p" value="$(arg k_p)"/>
		<param name="k_aij" value="$(arg k_aij)"/>
		<param name="k_gamma" value="$(arg k_gamma)"/>
		<param name="Takeoff_height" value="$(arg Takeoff_height)"/>
		<param name="Disarm_height" value="$(arg Disarm_height)"/>
		<param name="Land_speed" value="$(arg Land_speed)"/>
		<param name="geo_fence/x_min" value="$(arg x_min)"/>
		<param name="geo_fence/x_max" value="$(arg x_max)"/>
		<param name="geo_fence/y_min" value="$(arg y_min)"/>
		<param name="geo_fence/y_max" value="$(arg y_max)"/>
		<param name="geo_fence/z_min" value="$(arg z_min)"/>
		<param name="geo_fence/z_max" value="$(arg z_max)"/>
	</node>

	<node pkg="prometheus_control" type="swarm_controller" name="swarm_controller_uav2" output="screen">	
		<param name="flag_printf" value="$(arg flag_printf)"/>
		<param name="swarm_num" value="$(arg swarm_num)"/>
		<param name="uav_id" value="2"/>
		<param name="neighbour_id1" value="1" />
		<param name="neighbour_id2" value="3"/>
		<param name="uav_name" value="/uav2"/>
		<param name="neighbour_name1" value="/uav1" />
		<param name="neighbour_name2" value="/uav3"/>
		<param name="k_p" value="$(arg k_p)"/>
		<param name="k_aij" value="$(arg k_aij)"/>
		<param name="k_gamma" value="$(arg k_gamma)"/>
		<param name="Takeoff_height" value="$(arg Takeoff_height)"/>
		<param name="Disarm_height" value="$(arg Disarm_height)"/>
		<param name="Land_speed" value="$(arg Land_speed)"/>
		<param name="geo_fence/x_min" value="$(arg x_min)"/>
		<param name="geo_fence/x_max" value="$(arg x_max)"/>
		<param name="geo_fence/y_min" value="$(arg y_min)"/>
		<param name="geo_fence/y_max" value="$(arg y_max)"/>
		<param name="geo_fence/z_min" value="$(arg z_min)"/>
		<param name="geo_fence/z_max" value="$(arg z_max)"/>	
	</node>

	<node pkg="prometheus_control" type="swarm_controller" name="swarm_controller_uav3" output="screen">	
		<param name="flag_printf" value="$(arg flag_printf)"/>
		<param name="swarm_num" value="$(arg swarm_num)"/>
		<param name="uav_id" value="3"/>
		<param name="neighbour_id1" value="1" />
		<param name="neighbour_id2" value="2"/>
		<param name="uav_name" value="/uav3"/>
		<param name="neighbour_name1" value="/uav1" />
		<param name="neighbour_name2" value="/uav2"/>
		<param name="k_p" value="$(arg k_p)"/>
		<param name="k_aij" value="$(arg k_aij)"/>
		<param name="k_gamma" value="$(arg k_gamma)"/>
		<param name="Takeoff_height" value="$(arg Takeoff_height)"/>
		<param name="Disarm_height" value="$(arg Disarm_height)"/>
		<param name="Land_speed" value="$(arg Land_speed)"/>
		<param name="geo_fence/x_min" value="$(arg x_min)"/>
		<param name="geo_fence/x_max" value="$(arg x_max)"/>
		<param name="geo_fence/y_min" value="$(arg y_min)"/>
		<param name="geo_fence/y_max" value="$(arg y_max)"/>
		<param name="geo_fence/z_min" value="$(arg z_min)"/>
		<param name="geo_fence/z_max" value="$(arg z_max)"/>	
	</node>

	<arg name="input_source" default="2"/>
	<node pkg="prometheus_control" type="swarm_estimator" name="swarm_estimator_uav1" output="screen">
		<param name="uav_name" value="/uav1"/>
		<param name="input_source" value="$(arg input_source)" />
	</node>
	<node pkg="prometheus_control" type="swarm_estimator" name="swarm_estimator_uav2" output="screen">
		<param name="uav_name" value="/uav2"/>
		<param name="input_source" value="$(arg input_source)" />
	</node>
	<node pkg="prometheus_control" type="swarm_estimator" name="swarm_estimator_uav3" output="screen">
		<param name="uav_name" value="/uav3"/>
		<param name="input_source" value="$(arg input_source)" />
	</node>

	<node pkg="prometheus_control" type="swarm_ground_station" name="swarm_ground_station" output="screen" launch-prefix="gnome-terminal --tab --">
		<!-- 设置无人机ID才会在地面站显示 -->
		<param name="swarm_num" value="3" />
		<param name="uav1_name" value="/uav1" />
		<param name="uav2_name" value="/uav2" />
		<param name="uav3_name" value="/uav3" />
		<param name="uav1_id" value="1" />
		<param name="uav2_id" value="2" />
		<param name="uav3_id" value="3" />
	</node>

	<arg name="topic_of_global_pcl_uav1" default="/prometheus/pcl_groundtruth"/>
	<node pkg="prometheus_swarm_planning" type="swarm_planner_main" name="swarm_planner_uav1" output="screen" launch-prefix="gnome-terminal --tab --">	
		<remap from="/uav1/prometheus/swarm_planning/global_pcl" to="$(arg topic_of_global_pcl_uav1)" />
		<param name="swarm_planner/swarm_num" value="$(arg swarm_num)"/>
		<param name="swarm_planner/uav_id" value="1"/>
		<param name="swarm_planner/neighbour_id1" value="2" />
		<param name="swarm_planner/neighbour_id2" value="3"/>
		<param name="swarm_planner/uav_name" value="/uav1"/>
		<param name="swarm_planner/neighbour_name1" value="/uav2" />
		<param name="swarm_planner/neighbour_name2" value="/uav3"/>
		<param name="swarm_planner/min_dis" value="8.0"/>
        <!-- 二维平面规划 -->
        <param name="swarm_planner/is_2D" value="true" type="bool"/>
        <param name="swarm_planner/fly_height_2D" value="1.0" type="double"/>
        <!-- 停止距离 -->
        <param name="swarm_planner/safe_distance" value="0.01" type="double"/>
        <param name="swarm_planner/time_per_path" value="2.0" type="double"/>
        <param name="swarm_planner/replan_time" value="1.0" type="double"/>
        <param name="swarm_planner/map_input" value="0" type="int"/>
		<param name="swarm_planner/sim_mode" value="true" type="bool"/>
		<param name="swarm_planner/map_groundtruth" value="false" type="bool"/>
        <!-- 最大搜索步数 -->
        <param name="astar/allocate_num" value="10000" type="int"/>
        <!-- 启发式函数系数 -->
        <param name="astar/lambda_heu" value="2.0" type="double"/>
        <!-- 分辨率 -->
        <param name="map/resolution" value="0.1" type="double"/>
        <!-- 障碍物膨胀距离 -->
        <param name="map/inflate" value="0.4" type="double"/>
        <!-- 地图范围 -->
        <param name="map/origin_x" value="-15.0" type="double"/>
        <param name="map/origin_y" value="-15.0" type="double"/>
        <param name="map/origin_z" value="0.0" type="double"/>
        <param name="map/map_size_x" value="30.0" type="double"/>
        <param name="map/map_size_y" value="30.0" type="double"/>
        <param name="map/map_size_z" value="5.0" type="double"/>
	</node>

	<arg name="topic_of_global_pcl_uav2" default="/prometheus/pcl_groundtruth"/>
	<node pkg="prometheus_swarm_planning" type="swarm_planner_main" name="swarm_planner_uav2" output="screen" launch-prefix="gnome-terminal --tab --">	
		<remap from="/uav2/prometheus/swarm_planning/global_pcl" to="$(arg topic_of_global_pcl_uav2)" />
		<param name="swarm_planner/swarm_num" value="$(arg swarm_num)"/>
		<param name="swarm_planner/uav_id" value="2"/>
		<param name="swarm_planner/neighbour_id1" value="1" />
		<param name="swarm_planner/neighbour_id2" value="3"/>
		<param name="swarm_planner/uav_name" value="/uav2"/>
		<param name="swarm_planner/neighbour_name1" value="/uav1" />
		<param name="swarm_planner/neighbour_name2" value="/uav3"/>
		<param name="swarm_planner/min_dis" value="8.0"/>
        <!-- 二维平面规划 -->
        <param name="swarm_planner/is_2D" value="true" type="bool"/>
        <param name="swarm_planner/fly_height_2D" value="1.0" type="double"/>
        <!-- 停止距离 -->
        <param name="swarm_planner/safe_distance" value="0.01" type="double"/>
        <param name="swarm_planner/time_per_path" value="2.0" type="double"/>
        <param name="swarm_planner/replan_time" value="1.0" type="double"/>
        <param name="swarm_planner/map_input" value="0" type="int"/>
		<param name="swarm_planner/sim_mode" value="true" type="bool"/>
		<param name="swarm_planner/map_groundtruth" value="false" type="bool"/>
        <!-- 最大搜索步数 -->
        <param name="astar/allocate_num" value="10000" type="int"/>
        <!-- 启发式函数系数 -->
        <param name="astar/lambda_heu" value="2.0" type="double"/>
        <!-- 分辨率 -->
        <param name="map/resolution" value="0.2" type="double"/>
        <!-- 障碍物膨胀距离 -->
        <param name="map/inflate" value="0.5" type="double"/>
        <!-- 地图范围 -->
        <param name="map/origin_x" value="-15.0" type="double"/>
        <param name="map/origin_y" value="-15.0" type="double"/>
        <param name="map/origin_z" value="0.0" type="double"/>
        <param name="map/map_size_x" value="30.0" type="double"/>
        <param name="map/map_size_y" value="30.0" type="double"/>
        <param name="map/map_size_z" value="5.0" type="double"/>
	</node>

	<arg name="topic_of_global_pcl_uav3" default="/prometheus/pcl_groundtruth"/>
	<node pkg="prometheus_swarm_planning" type="swarm_planner_main" name="swarm_planner_uav3" output="screen" launch-prefix="gnome-terminal --tab --">	
		<remap from="/uav3/prometheus/swarm_planning/global_pcl" to="$(arg topic_of_global_pcl_uav3)" />
		<param name="swarm_planner/swarm_num" value="$(arg swarm_num)"/>
		<param name="swarm_planner/uav_id" value="3"/>
		<param name="swarm_planner/neighbour_id1" value="1" />
		<param name="swarm_planner/neighbour_id2" value="2"/>
		<param name="swarm_planner/uav_name" value="/uav3"/>
		<param name="swarm_planner/neighbour_name1" value="/uav1" />
		<param name="swarm_planner/neighbour_name2" value="/uav2"/>
		<param name="swarm_planner/min_dis" value="8.0"/>
        <!-- 二维平面规划 -->
        <param name="swarm_planner/is_2D" value="true" type="bool"/>
        <param name="swarm_planner/fly_height_2D" value="1.0" type="double"/>
        <!-- 停止距离 -->
        <param name="swarm_planner/safe_distance" value="0.01" type="double"/>
        <param name="swarm_planner/time_per_path" value="2.0" type="double"/>
        <param name="swarm_planner/replan_time" value="1.0" type="double"/>
        <param name="swarm_planner/map_input" value="0" type="int"/>
		<param name="swarm_planner/sim_mode" value="true" type="bool"/>
		<param name="swarm_planner/map_groundtruth" value="true" type="bool"/>
        <!-- 最大搜索步数 -->
        <param name="astar/allocate_num" value="10000" type="int"/>
        <!-- 启发式函数系数 -->
        <param name="astar/lambda_heu" value="2.0" type="double"/>
        <!-- 分辨率 -->
        <param name="map/resolution" value="0.1" type="double"/>
        <!-- 障碍物膨胀距离 -->
        <param name="map/inflate" value="0.4" type="double"/>
        <!-- 地图范围 -->
        <param name="map/origin_x" value="-15.0" type="double"/>
        <param name="map/origin_y" value="-15.0" type="double"/>
        <param name="map/origin_z" value="0.0" type="double"/>
        <param name="map/map_size_x" value="30.0" type="double"/>
        <param name="map/map_size_y" value="30.0" type="double"/>
        <param name="map/map_size_z" value="5.0" type="double"/>
	</node>

	<!-- run the pub_goal_swarm.cpp -->
	<node pkg="prometheus_mission" type="pub_goal_swarm" name="pub_goal_swarm" output="screen" launch-prefix="gnome-terminal --">	
	</node>

	<!-- run the rviz -->
	<arg name="visualization" default="true"/>
	<group if="$(arg visualization)">
		<node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_swarm_planning.rviz" />
        <!-- 真实点云 -->
        <node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
		    <param name="pcd_path" type="string" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	    </node>
    </group>
</launch>

