<launch>
	<!-- Launch Gazebo Simulation -->
	<arg name="is_2DLidar" default="true"/>
	<arg name="octomap_denied" default="false"/>
	<!-- State_Machine == 1 : Ready to pass the door, start from: -->
	<arg name="START_POINT_X" default="-6.5"/>
	<arg name="START_POINT_Y" default="0.0"/>
	<arg name="START_POINT_Z" default="1.7"/>
	<arg name="START_POINT_YAW" default="0.0"/>
	<!-- State_Machine == 2 : Ready to pass circle, start from: -->
	<arg name="CIRCLE_POINT_X" default="-3.5"/>
	<arg name="CIRCLE_POINT_Y" default="0.0"/>
	<arg name="CIRCLE_POINT_Z" default="1.8"/>
	<arg name="CIRCLE_POINT_YAW" default="0.0"/>
	<!-- State_Machine == 3 : Ready to pass jungle, start from: -->
	<arg name="PILLAR_POINT_X" default="1.5"/>
	<arg name="PILLAR_POINT_Y" default="0.0"/>
	<arg name="PILLAR_POINT_Z" default="1.8"/>
	<arg name="PILLAR_POINT_YAW" default="0.0"/>
	<!-- State_Machine == 4 : Ready to pass corridor, start from: -->
	<arg name="CORRIDOR_POINT_X" default="9.5"/>
	<arg name="CORRIDOR_POINT_Y" default="-1.0"/>
	<arg name="CORRIDOR_POINT_Z" default="1.8"/>   <!-- A*算法在这里有点问题，，odom没跟上 -->
	<arg name="CORRIDOR_POINT_YAW" default="0.0"/>
	<!-- State_Machine == 5 : Ready to track a color line, start from: -->
	<arg name="NUM_POINT_X" default="17"/>
	<arg name="NUM_POINT_Y" default="0.0"/>
	<arg name="NUM_POINT_Z" default="1.8"/>
	<arg name="NUM_POINT_YAW" default="0.0"/>
	<!-- State_Machine == 6 : Ready to landing, start from: -->
	<arg name="LAND_POINT_X" default="23"/>
	<arg name="LAND_POINT_Y" default="0.0"/>
	<arg name="LAND_POINT_Z" default="1.8"/>
	<arg name="LAND_POINT_YAW" default="0.0"/>

	<!-- Start from : -->
	<arg name="State_Machine" default="1"/>
	<arg name="x" default="$(arg START_POINT_X)"/>
	<arg name="y" default="$(arg START_POINT_Y)"/>
	<arg name="z" default="$(arg START_POINT_Z)"/>
	<arg name="Y" default="$(arg START_POINT_YAW)"/>

	<arg name="world" default="$(find prometheus_gazebo)/worlds/indoor_competition.world"/>
	<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/amov_solo_sensors/amov_solo_sensors.sdf"/>
	<arg name="model" default="amov_solo"/>
	<arg name="gazebo_gui" default="false"/>
	<arg name="visualization" default="true"/>

	<include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
		<arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
		<arg name="world" value="$(arg world)"/>
		<arg name="sdf" value="$(arg sdf)"/>
		<arg name="model" value="$(arg model)"/>
		<arg name="x" value="$(arg x)"/>
		<arg name="y" value="$(arg y)"/>
		<arg name="z" value="0.2"/>
		<arg name="Y" value="$(arg Y)"/>
	</include>

	<!-- 启动octomap建图 -->
	<!-- run the laser_to_pointcloud -->
	<node if="$(arg is_2DLidar)" pkg="prometheus_gazebo" type="laser_to_pointcloud.py" name="laser_to_pointcloud" >
	</node>
	<node if="$(arg is_2DLidar)" pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.1" />
		<!-- 发布地图的坐标系 -->
		<param name="frame_id" type="string" value="world" />
		<!-- 传感器最大感知范围 (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		<!-- 局部点云输入 -->
		<remap from="cloud_in" to="/prometheus/sensors/pcl2" />
	</node>
	<node unless="$(arg is_2DLidar)" pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.10" />
		<!-- 发布地图的坐标系 -->
		<param name="frame_id" type="string" value="map" />
		<!-- 传感器最大感知范围 (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		<!-- 局部点云输入,该话题定义在3Dlidar.sdf中 (PointCloud2) -->
		<remap from="cloud_in" to="/prometheus/sensors/3Dlidar_scan" />
	</node>

	<!-- 启动A*全局规划算法 -->
	<node pkg="prometheus_global_planning" name="global_planner_main" type="global_planner_main" output="screen">
		<remap from="/prometheus/global_planning/global_pcl" to="/octomap_point_cloud_centers" /> <!-- 生成点云环境，(1：RGBD相机、三维激光雷达; 2：2维激光雷达)数据需要提前建图 -->
		<!-- 参数 -->
		<param name="global_planner/spinning" value="$(arg is_2DLidar)" type="bool"/>
		<param name="global_planner/spinning_rate" value="1.0" type="double"/>
		<!-- 二维平面规划 -->
		<param name="global_planner/is_2D" value="$(arg is_2DLidar)" type="bool"/> <!-- 因为启动了地图服务，所以可以是否 -->
		<param name="global_planner/fly_height_2D" value="$(arg z)" type="double"/> <!-- is_2D情况下有效 -->
		<!-- 停止距离 -->
		<param name="global_planner/safe_distance" value="0.01" type="double"/> <!-- 若膨胀距离map/inflate设置已考虑安全距离，建议此处设为0 -->
		<param name="global_planner/time_per_path" value="0.5" type="double"/> <!-- 路径追踪执行频率 -->
		<param name="global_planner/replan_time" value="2.0" type="double"/> <!-- 重规划频率 -->
		<param name="global_planner/map_input" value="0" type="int"/> <!-- 0：groundtruth点云、SLAM全局点云(目前只有这个可行); 1：RGBD相机、三维激光雷达; 2：2维激光雷达 -->
		<!-- 最大搜索步数 -->
		<param name="astar/allocate_num" value="5000" type="int"/>
		<!-- 启发式函数系数 -->
		<param name="astar/lambda_heu" value="2.0" type="double"/>
		<!-- 分辨率 -->
		<param name="map/resolution" value="0.1" type="double"/>
		<!-- 障碍物膨胀距离 -->
		<param name="map/inflate" value="0.5" type="double"/>
		<!-- 地图范围 -->
		<param name="map/map_size_x" value="20.0" type="double"/>
		<param name="map/map_size_y" value="10.0" type="double"/>
		<param name="map/map_size_z" value="2.0" type="double"/>
		<param name="map/origin_x" value="8.0" type="double"/>
		<param name="map/origin_y" value="-10.0" type="double"/>
		<param name="map/origin_z" value="1.0" type="double"/>
	</node>

	<!-- 启动APF局部规划算法 -->
	<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen">	
		<remap unless="$(arg octomap_denied)" from="/prometheus/planning/local_pcl" to="/octomap_point_cloud_centers" />
		<remap if="$(arg octomap_denied)" from="/prometheus/planning/local_pcl" to="/prometheus/sensors/2Dlidar_scan" /> <!-- 3D lidar 需要激活 -->
		<!-- 参数 -->
		<param name="local_planner/is_2D" value="$(arg octomap_denied)" type="bool"/>
		<param name="local_planner/spinning" value="$(arg is_2DLidar)" type="bool"/>
		<param name="local_planner/spinning_rate" value="1.0" type="double"/>
		<!-- 激光雷达模型,0代表3d雷达,1代表2d雷达 -->
		<param if="$(arg octomap_denied)" name="local_planner/lidar_model" value="1" type="int"/>
		<param unless="$(arg octomap_denied)" name="local_planner/lidar_model" value="0" type="int"/>
		<!-- 飞行高度 -->
		<param name="local_planner/fly_height_2D" value="$(arg z)" type="double"/> <!-- 如果是二维的话有效 -->
		<!-- 最大速度，设的越小越安全 -->
		<param name="local_planner/max_planning_vel" value="0.2" type="double"/>
		<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
		<param name="apf/inflate_distance" value="0.5" type="double"/>
		<!-- 感知距离，只考虑感知距离内的障碍物 -->
		<param name="apf/sensor_max_range" value="2.0" type="double"/>  
		<!-- 增益 -->
		<param name="apf/k_push" value="3.0" type="double"/>
		<param name="apf/k_att" value="1.0" type="double"/>
		<!-- 最大吸引距离 -->
		<param name="apf/max_att_dist" value="5" type="double"/>
		<!-- 地面高度，不考虑低于地面高度的障碍物 -->
		<param name="apf/ground_height" value="0.3" type="double"/>
		<!-- 地面安全高度，小于该高度，会产生向上推力 -->
		<param name="apf/ground_safe_height" value="0.3" type="double"/>
		<!-- 停止距离，小于该距离，停止自动飞行 -->
		<param name="apf/safe_distance" value="0.01" type="double"/>
	</node>	

	<!-- run the circle_det -->
	<node pkg="prometheus_detection" type="ellipse_det" name="ellipse_det" output="screen">
		<param name="camera_topic" type="string" value="/prometheus/sensor/monocular_front/image_raw" />
		<param name="camera_info" type="string" value="$(find prometheus_gazebo)/config/camera_config/camera_param_gazebo_monocular.yaml" />
	</node>

	<!-- run the color_detection.cpp -->
	<node pkg="prometheus_detection" type="color_line_det.py" name="color_det" output="screen">
		<param name="camera_topic" value="/prometheus/sensor/monocular_down/image_raw"/>
		<param name="camera_info" type="string" value="$(find prometheus_gazebo)/config/camera_config/camera_param_gazebo_monocular.yaml"/>
		<!-- 线距底边的距离，0-1，0.5表示在图像中间 -->
		<param name="line_location" value="0.5"/>
		<param name="line_location_a1" value="0.5"/>
		<param name="line_location_a2" value="0.8"/>
		<!-- 待检测颜色，没有此颜色时，默认检测黑色，可选：black，red，yellow，green，blue -->
		<param name="line_color" value="black"/>
	</node>

	<!-- run the landpad_det.cpp -->
	<node pkg="prometheus_detection" type="landpad_det" name="landpad_det" output="screen">
		<param name="camera_topic" type="string" value="/prometheus/sensor/monocular_down/image_raw" />
		<param name="camera_info" type="string" value="$(find prometheus_gazebo)/config/camera_config/camera_param_gazebo_monocular.yaml" />
	</node>
    
	<!-- run the indoor_competition.cpp -->
	<node pkg="prometheus_mission" type="indoor_competition" name="indoor_competition" output="screen" launch-prefix="gnome-terminal --">
		<param name="kpx_circle_track" value="0.5" />
		<param name="kpy_circle_track" value="0.5" />
		<param name="kpz_circle_track" value="0.5" />
		<param name="kpx_land" value="0.35" />
		<param name="kpy_land" value="0.35" />
		<param name="kpz_land" value="0.15" />
		<param name="State_Machine" value="$(arg State_Machine)" />
		<param name="START_POINT_X" value="$(arg x)" />
		<param name="START_POINT_Y" value="$(arg y)" />
		<param name="START_POINT_Z" value="$(arg z)" />
		<param name="START_POINT_YAW" value="$(arg Y)" />
		<param name="spinning_rate" value="1.0" /> <!-- 自旋速度 -->
		<param name="is_2DLidar" value="$(arg is_2DLidar)" /> <!-- 如果使用 2dLidar 就需要自旋以感知地图 -->
	</node>	

	<!-- 启动rviz,设为false可关闭 -->
	<group if="$(arg visualization)">
		<node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_config_astar.rviz" />
		<!-- <node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen"/> -->
	</group>


</launch>

