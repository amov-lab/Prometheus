<launch>
	<!-- 该demo有bug,暂未修复,请勿使用 -->
    <!-- Launch Gazebo Simulation -->
    <arg name="x" default="-10.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0"/>
	<arg name="world" default="$(find prometheus_gazebo)/worlds/obstacle.world"/>
	<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/p450_D435i/p450_D435i.sdf"/>
	<arg name="model" default="p450_D435i"/>
    <include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
	  <arg name="world" value="$(arg world)"/>
	  <arg name="sdf" value="$(arg sdf)"/>
	  <arg name="model" value="$(arg model)"/>
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
    </include>

	<!-- RGBD相机局部点云 -->
	<!-- 实际运行中，D435i可直出局部点云;但此处仿真需要生成局部点云 -->
	<!-- 可以通过下面这个launch文件生成局部点云(比较吃CPU),也可以通过在D435i.sdf中启动libgazebo_ros_openni_kinect插件来生成局部点云 -->
	<include file="$(find prometheus_gazebo)/launch_basic/depth_proc.launch"></include>

	<!-- 设定局部点云话题-->
	<arg name="topic_of_local_pcl" default="/realsense_plugin/camera/local_pointclouds"/>
	<!-- 启动局部规划算法 -->
	<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen"  launch-prefix="gnome-terminal --">	
		<remap from="/prometheus/planning/local_pcl" to="$(arg topic_of_local_pcl)" />
		<!-- 参数 -->
		<!-- 选择算法 0代表APF,1代表VFH -->
		<param name="local_planner/algorithm_mode" value="0" type="int"/>
		<!-- 激光雷达模型,0代表3d雷达,1代表2d雷达 -->
		<param name="local_planner/lidar_model" value="0" type="int"/>
		<!-- 飞行高度 -->
		<param name="local_planner/fly_height_2D" value="1.0" type="double"/>
		<param name="local_planner/sim_mode" value="true" type="bool"/>
		<!-- 最大速度，设的越小越安全 -->
		<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
		<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
		<param name="apf/inflate_distance" value="1.2" type="double"/>
		<!-- 感知距离，只考虑感知距离内的障碍物 -->
		<param name="apf/obs_distance" value="8.0" type="double"/>  
		<!-- 增益 -->
		<param name="apf/k_push" value="2.2" type="double"/>
		<param name="apf/k_att" value="1.0" type="double"/>
		<!-- 安全距离，距离障碍物在安全距离内，k_push自动增大 -->
		<param name="apf/min_dist" value="0.1" type="double"/>
		<!-- 最大吸引距离 -->
		<param name="apf/max_att_dist" value="4" type="double"/>
		<!-- 地面高度，不考虑低于地面高度的障碍物 -->
		<param name="apf/ground_height" value="0.3" type="double"/>
		<!-- 地面安全高度，小于该高度，会产生向上推力 -->
		<param name="apf/ground_safe_height" value="0.3" type="double"/>
		<!-- 停止距离，小于该距离，停止自动飞行 -->
		<param name="apf/safe_distance" value="0.01" type="double"/>
	</node>	

	<!-- run the pub_goal.cpp -->
	<node pkg="prometheus_mission" type="pub_goal" name="pub_goal" output="screen" launch-prefix="gnome-terminal --">	
	</node>

	<!-- 启动rviz,设为false可关闭 -->
	<arg name="visualization" default="true"/>
	<group if="$(arg visualization)">
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_planning.rviz" />
        <!-- obstacle.world 真实点云 -->
        <node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
		    <param name="pcd_path" type="string" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	    </node>
    </group>
</launch>