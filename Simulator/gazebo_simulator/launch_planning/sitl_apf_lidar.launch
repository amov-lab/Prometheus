<launch>
	<!-- Launch Gazebo Simulation -->
	<arg name="x" default="0.0"/>
	<arg name="y" default="-10.0"/>
	<arg name="z" default="0"/>
	<arg name="gazebo_gui" default="false"/>
	<arg name="world" default="$(find prometheus_gazebo)/worlds/obstacle.world"/>
	<arg name="visualization" default="true"/>
	<arg name="pcd_file" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	<arg name="model" default="amov_solo"/>
	<arg name="is_2DLidar" default="false"/>
	<arg name="octomap_denied" default="false"/> <!-- 不管2d还是2d，最好false -->
	<arg name="type_in_goal" default="false"/>

	<group if="$(arg is_2DLidar)">
		<include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
			<arg name="gazebo_gui" default="$(arg gazebo_gui)"/>
			<arg name="world" value="$(arg world)"/>
			<arg name="sdf" value="$(find prometheus_gazebo)/amov_models/amov_solo_hokuyo_2Dlidar/amov_solo_hokuyo_2Dlidar.sdf"/>
			<arg name="model" value="$(arg model)"/>
			<arg name="x" value="$(arg x)"/>
			<arg name="y" value="$(arg y)"/>
			<arg name="z" value="$(arg z)"/>
		</include>
		<!-- run the laser_to_pointcloud -->
		<node unless="$(arg octomap_denied)" pkg="prometheus_gazebo" type="laser_to_pointcloud.py" name="laser_to_pointcloud" >
		</node>
		<!-- 启动octomap建图 -->
		<node unless="$(arg octomap_denied)" pkg="octomap_server" type="octomap_server_node" name="octomap_server">
			<param name="resolution" value="0.1" />
			<!-- 发布地图的坐标系 -->
			<param name="frame_id" type="string" value="world" />
			<!-- 传感器最大感知范围 (speedup!) -->
			<param name="sensor_model/max_range" value="5.0" />
			<!-- 局部点云输入 -->
			<remap from="cloud_in" to="/prometheus/sensors/pcl2" />
		</node>
	</group>
	<group unless="$(arg is_2DLidar)">
		<include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
			<arg name="gazebo_gui" default="$(arg gazebo_gui)"/>
			<arg name="world" value="$(arg world)"/>
			<arg name="sdf" value="$(find prometheus_gazebo)/amov_models/amov_solo_3Dlidar/amov_solo_3Dlidar.sdf"/>
			<arg name="model" value="$(arg model)"/>
			<arg name="x" value="$(arg x)"/>
			<arg name="y" value="$(arg y)"/>
			<arg name="z" value="$(arg z)"/>
		</include>
		<!-- 启动 octomap 建图 -->
		<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
			<param name="resolution" value="0.1" />
			<!-- fixed map(world) frame (set to 'map' if SLAM or localization running!) -->
			<param name="frame_id" type="string" value="map" />
			<!-- maximum range to integrate (speedup!) -->
			<param name="sensor_model/max_range" value="5.0" />
			<!-- data source to integrate (PointCloud2) -->
			<remap from="cloud_in" to="/prometheus/sensors/3Dlidar_scan" />
		</node>
	</group>

	<!-- 设定局部点云话题-->
	<!-- 启动局部规划算法 -->
	<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen" launch-prefix="gnome-terminal --tab --">	
		<remap unless="$(arg octomap_denied)" from="/prometheus/planning/local_pcl" to="/octomap_point_cloud_centers" />
		<remap if="$(arg octomap_denied)" from="/prometheus/planning/local_pcl" to="/prometheus/sensors/2Dlidar_scan" /> <!-- 3D lidar 一定要激活octomap -->
		<!-- 参数 -->
		<param name="local_planner/sim_mode" value="true" type="bool"/>
		<param name="local_planner/planner_enable" value="true" type="bool"/>
		<param name="local_planner/control_yaw_flag" value="$(arg is_2DLidar)" type="bool"/>
		<!-- 选择算法 0代表APF,1代表VFH(暂时不建议) -->
		<param name="local_planner/algorithm_mode" value="0" type="int"/>
		<!-- 激光雷达模型,0代表3d雷达类型<sensor_msgs::PointCloud2>,1代表2d雷达类型<sensor_msgs::LaserScan> -->
		-<param if="$(arg octomap_denied)" name="local_planner/lidar_model" value="1" type="int"/>
		<param unless="$(arg octomap_denied)" name="local_planner/lidar_model" value="0" type="int"/>
		<!-- 飞行高度 -->
		<param name="local_planner/is_2D" value="$(arg octomap_denied)" type="bool"/>
		<param name="local_planner/fly_height_2D" value="1.0" type="double"/> <!-- 如果是二维的话有效 -->
		<!-- 最大速度，设的越小越安全 -->
		<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
		<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
		<param name="local_planner/inflate_distance" value="0.8" type="double"/>
		<!-- 感知距离，只考虑感知距离内的障碍物 -->
		<param name="local_planner/sensor_max_range" value="2.0" type="double"/>  
		<!-- 增益 -->
		<param name="apf/k_push" value="2.0" type="double"/>
		<param name="apf/k_att" value="1.0" type="double"/>
		<!-- 最大吸引距离 -->
		<param name="apf/max_att_dist" value="4" type="double"/>
		<!-- 地面高度，不考虑低于地面高度的障碍物 -->
		<param name="local_planner/ground_height" value="0.3" type="double"/>
		<!-- 地面安全高度，小于该高度，会产生向上推力 -->
		<param name="apf/ground_safe_height" value="0.3" type="double"/>
		<!-- 停止距离，小于该距离，停止自动飞行 -->
		<param name="local_planner/safe_distance" value="0.01" type="double"/>
	</node>	

	<!-- terminal输入goal -->
	<node if="$(arg type_in_goal)" pkg="prometheus_mission" type="pub_goal" name="pub_goal" output="screen" launch-prefix="gnome-terminal --tab --">	
	</node> 

	<!-- 启动rviz,设为false可关闭 -->
	<group if="$(arg visualization)">
		<node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_planning.rviz" />
		<!-- obstacle.world 真实点云 -->
		<node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
			<param name="pcd_path" type="string" value="$(arg pcd_file)" />
		</node>
	</group>
</launch>
